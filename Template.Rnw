\documentclass{article}
\usepackage[margin=1in]{geometry}
\usepackage{hyperref}
\hypersetup{
    colorlinks=true,
    linkcolor=blue,
    filecolor=magenta,      
    urlcolor=cyan,
}
\begin{document}
\SweaveOpts{concordance=TRUE}

  \begin{titlepage}
    \begin{center}

    % Upper part of the page. The '~' is needed because \\
    % only works if a paragraph has started.
    \includegraphics[width=0.5\textwidth]{/Users/Fliptop/EXTRACT_ALL/Report_Test/153_153_fliptop_logo.png}~\\[1cm]

% Client Name ---------------------------------------------------------------------------------------------------------------------------
    \textsc{\LARGE Data Profile Report}\\[1cm]
    \underline{\textsc{\Large Marketo}}\\[1.5cm]

    % Author
    \begin{center} \large
      \emph{Author:}\\
      Kevin \textsc {Liu}
    \end{center}
    
    \vfill
    % Bottom of the page
    {\large \today}
    \end{center}
  \end{titlepage}

<<global_options, eval=FALSE, results=hide, echo=FALSE>>=
library(ggplot2)
library(xtable)
library(plyr)
setwd('/Users/Fliptop/EXTRACT_ALL/Report_Test/')
@

<<label=rev_distr, fig=TRUE, echo=FALSE, eval=TRUE, results=tex, include=FALSE>>=
#Dataset to conduct report on ----------------------------------------------------------------------------------------------------------------
#Need to change the input file and assign the correct name.
mkto <- read.csv('/Users/Fliptop/IdeaProjects/Classification/stuff2/lead_activity_features_9017947_OUT_test.csv', header=T,stringsAsFactor=F)

df_default <- mkto
df_name <- 'Marketo'

revenueDistribution <- function(df, df_name){
  hist(df, xlab = 'Revenue/Platform Amount', breaks=50, col='steelblue1', prob = T, main = sprintf('%s Revenue Distribution', df_name), xlim = c(min(df_default_zero_included), max(df)))
  lines(density(df), lty = 'dotted', col = 'darkgreen', lwd = 4)
}

df_default_zero_included <- df_default[df_default$Platform_amount>=0, 'Platform_amount']
revenueDistribution(df_default_zero_included, df_name)
@

<<label=rev_distr_no_zero, fig=TRUE, echo=FALSE, eval=TRUE, results=tex, include=FALSE>>=
df_default_zero_removed <- df_default[df_default$Platform_amount>0, 'Platform_amount']
revenueDistribution(df_default_zero_removed, df_name)
@

% Data Coverage graphs ----------------------------------------------------------------------------------------------------------------------------------------------------------------
<<label = data_coverage, fig=TRUE, echo=FALSE, eval=TRUE, results=tex, include=FALSE>>=
library(plyr)

dmfc <- read.csv('/Users/Fliptop/EXTRACT_ALL/import_910331_implicity_training.csv', header=T,stringsAsFactor=F)
dataSift <- read.csv('/Users/Fliptop/EXTRACT_ALL/import_911240_implicity_training.csv', header=T,stringsAsFactor=F)
rktf <- read.csv('/Users/Fliptop/EXTRACT_ALL/import_911395_implicity_training.csv', header=T,stringsAsFactor=F)
xngt <- read.csv('/Users/Fliptop/EXTRACT_ALL/import_911421_implicity_training.csv', header=T,stringsAsFactor=F)
insv <- read.csv('/Users/Fliptop/EXTRACT_ALL/import_911482_implicity_training.csv', header=T, stringsAsFactor=F)
mkto <- read.csv('/Users/Fliptop/IdeaProjects/Classification/stuff2/lead_activity_features_9017947_OUT_test.csv', header=T, stringsAsFactor=F)
asana <- read.csv('/Users/Fliptop/EXTRACT_ALL/import_911655_explicitly_training.csv', header=T, stringsAsFactor=F)

total_list <- list(dmfc, dataSift, rktf, xngt, insv, mkto, asana)
total_list_df <- rbind.fill(dmfc, dataSift, rktf, xngt, insv, mkto, asana)

# If revenue data exists then no need to recall default datasets
#df_default <- mkto
#df_name <- 'Marketo'

trim <- function( x ) {
  gsub("(^[[:space:]]+|[[:space:]]+$)", "", x)
}

rowCoverage<-function(df){
  df_na_T <- apply(df, 2, is.na)
  1 - apply(df_na_T,1,sum)/ncol(df)
}

total_rc <- c()
for (set in total_list){
  x_df <- as.data.frame(sapply(set, function(f){is.na(f)<-which(trim(f) == ''| f=='-1');f}))
  total_rc <- c(total_rc, rowCoverage(x_df))
}

df_default_df <- as.data.frame(sapply(df_default, function(f){is.na(f)<-which(trim(f) == ''| f=='-1');f}))
df_default_rc <- rowCoverage(df_default_df)

num_breaks <- ceiling((max(df_default_rc) - min(df_default_rc))/0.01)
hist(df_default_rc, prob = TRUE, main = 'Proportion of coverage at record level',xlab = 'proportion of field coverage',ylab = 'percentage',col = 'slateblue1', xlim = c(min(df_default_rc), max(df_default_rc)), breaks = num_breaks)

lines(density(total_rc), lty = 6, col = 'firebrick1', lwd = 4)
legend('topright', 'Global Coverage', lty = 6, lwd = 2.5, col = 'firebrick1')
@

<<label = mko_data_coverage, fig=TRUE, echo=FALSE, eval=TRUE, results=tex, include=FALSE>>=
mko_list <- data.frame(df_default[,1])
Platform_list <- data.frame(df_default[,1])
InboundScore_list <- data.frame(df_default[,1])
BW_list <- data.frame(df_default[,1])
DNB_list <- data.frame(df_default[,1])
Indeed_list <- data.frame(df_default[,1])
PG_list <- data.frame(df_default[,1])

mko_names <- c('Label Converted')
Platform_names <- c('Label Converted')
InboundScore_names <- c('Label Converted')
BW_names <- c('Label Converted')
DNB_names <- c('Label Converted')
Indeed_names <- c('Label Converted')
PG_names <- c('Label Converted')

mko_list_full <- data.frame(df_default[,1])
Platform_list_full <- data.frame(df_default[,1])
InboundScore_list_full <- data.frame(df_default[,1])
BW_list_full <- data.frame(df_default[,1])
DNB_list_full <- data.frame(df_default[,1])
Indeed_list_full <- data.frame(df_default[,1])
PG_list_full <- data.frame(df_default[,1])

mko_names_full <- c('Label Converted')
Platform_names_full <- c('Label Converted')
InboundScore_names_full <- c('Label Converted')
BW_names_full <- c('Label Converted')
DNB_names_full <- c('Label Converted')
Indeed_names_full <- c('Label Converted')
PG_names_full <- c('Label Converted')

for (name in names(df_default)){
  if (grepl('mko', name)){
    mko_list[ ,name] <- df_default[,name]
    mko_names <- cbind(mko_names, name)
  }
  else if (grepl('Platform', name)){
    Platform_list[ ,name] <- df_default[,name]
    Platform_names <- cbind(Platform_names, name)
  }
  else if (grepl('InboundScore', name)){
    InboundScore_list[ ,name] <- df_default[,name]
    InboundScore_names <- cbind(InboundScore_names, name)
  }
  else if (grepl('BW', name)){
    BW_list[ ,name] <- df_default[,name]
    BW_names <- cbind(BW_names, name)
  }
  else if (grepl('DNB', name)){
    DNB_list[ ,name] <- df_default[,name]
    DNB_names <- cbind(DNB_names, name)    
  }
  else if (grepl('Indeed', name)){
    Indeed_list[ ,name] <- df_default[,name]
    Indeed_names <- cbind(Indeed_names, name)     
  }
  else if (grepl('PG', name)){
    PG_list[ ,name] <- df_default[,name]
    PG_names <- cbind(PG_names, name) 
  }
}

cbind.fill<-function(...){
    nm <- list(...) 
    nm<-lapply(nm, as.matrix)
    n <- max(sapply(nm, nrow)) 
    do.call(cbind, lapply(nm, function (x) 
    rbind(x, matrix(, n-nrow(x), ncol(x))))) 
}

for (name in names(total_list_df)){
  if (grepl('mko', name)){
    mko_list_full <- cbind.fill(mko_list_full, total_list_df[,name])
    mko_names_full <- cbind(mko_names_full, name)
  }
  else if (grepl('Platform', name)){
    Platform_list_full <- cbind.fill(Platform_list_full, total_list_df[,name])
    Platform_names_full <- cbind(Platform_names_full, name)
  }
  else if (grepl('InboundScore', name)){
    InboundScore_list_full <- cbind.fill(InboundScore_list_full, total_list_df[,name])
    InboundScore_names_full <- cbind(InboundScore_names_full, name)
  }
  else if (grepl('BW', name)){
    BW_list_full <- cbind.fill(BW_list_full, total_list_df[,name])
    BW_names_full <- cbind(BW_names_full, name)
  }
  else if (grepl('DNB', name)){
    DNB_list_full <- cbind.fill(DNB_list_full, total_list_df[,name])
    DNB_names_full <- cbind(DNB_names_full, name)    
  }
  else if (grepl('Indeed', name)){
    Indeed_list_full <- cbind.fill(Indeed_list_full, total_list_df[,name])
    Indeed_names_full <- cbind(Indeed_names_full, name)     
  }
  else if (grepl('PG', name)){
    PG_list_full <- cbind.fill(PG_list_full, total_list_df[,name])
    PG_names_full <- cbind.fill(PG_names_full, name) 
  }
}

decomp_graphs <- function(df, df_full, label){
  df <- df[ ,2:ncol(df)]
  df <- as.data.frame(sapply(df, function(f){is.na(f)<-which(trim(f) == ''| f=='-1');f}))
  df_rc <- rowCoverage(df)

  df_full <- df_full[ ,2:ncol(df_full)]
  df_full <- as.data.frame(sapply(as.data.frame(df_full), function(f){is.na(f)<-which(trim(f) == ''| f == '-1');f}))
  df_rc_full <- rowCoverage(df_full)

  num_breaks <- ceiling((max(df_rc) - min(df_rc))/0.01)
  hist(df_rc, freq = F, main = label, xlab = 'proportion of field coverage', ylab = 'percentage of total', col = 'green1', xlim = c(min(df_rc), max(df_rc)), breaks = num_breaks)

  lines(density(df_rc_full), lty = 6, col = 'orangered2', lwd = 3)
  legend('topright', 'Global Coverage', lty = 6, lwd = 2.5, col = 'orangered2')
}

decomp_graphs(mko_list, mko_list_full, 'Proportion of coverage over Marketing Activity Variables')
@

<<label = platform_data_coverage, fig=TRUE, echo=FALSE, eval=TRUE, results=tex, include=FALSE>>=
decomp_graphs(Platform_list, Platform_list_full, 'Coverage over Marketing and Personal Info Variables')
@

<<label = inboundscore_data_coverage, fig=TRUE, echo=FALSE, eval=TRUE, results=tex, include=FALSE>>=
decomp_graphs(InboundScore_list, InboundScore_list_full, 'Coverage over Business Social Variables')
@

<<label = bw_data_coverage, fig=TRUE, echo=FALSE, eval=TRUE, results=tex, include=FALSE>>=
decomp_graphs(BW_list, BW_list_full, 'Coverage over Business Technology Variables')
@

<<label = dnb_data_coverage, fig=TRUE, echo=FALSE, eval=TRUE, results=tex, include=FALSE>>=
decomp_graphs(DNB_list, DNB_list_full, 'Coverage over Business Info Variables')
@

<<label = indeed_data_coverage, fig=TRUE, echo=FALSE, eval=TRUE, results=tex, include=FALSE>>=
decomp_graphs(Indeed_list, Indeed_list_full, 'Coverage over Business Hiring Variables')
@

<<label = pg_data_coverage, fig=TRUE, echo=FALSE, eval=TRUE, results=tex, include=FALSE>>=
decomp_graphs(PG_list, PG_list_full, 'Coverage over Personal Social Variables')
@

% Variable Impact Graphs ----------------------------------------------------------------------------------------------------------------------------------------------------------------
<<label = job_seniority_impact, fig=TRUE, echo=FALSE, eval=TRUE, results=tex, width=20, height=10, include=FALSE>>=
library(ggplot2)
df_default$Label_Converted <- sapply(df_default$label_converted., toString)
df_default$Label_Converted <- sapply(df_default$Label_Converted., toString)


print(ggplot(df_default[df_default$JobSeniority!='', ], aes(x=JobSeniority, group=Label_Converted, fill = Label_Converted), cex.lab=2, cex.axis=2, cex.main=2, cex.sub=2, main) + geom_bar() + coord_flip() + labs(y = "Count", x = "Job Seniority", fill = "Label Converted", title = sprintf('%s (Job Seniority Variable Impact)', df_name)) + theme(axis.text.x  = element_text(size = 13), axis.text.y  = element_text(size = 15), axis.title.x  = element_text(size = 15), axis.title.y  = element_text(size = 13)))

#impact_graphs <- function(variable, title){
#  print(ggplot(df_default[df_default[, variable]!='', ], aes(x=df_default[,variable], group=df_default$Label_Converted, fill = df_default$Label_Converted), cex.lab=2, cex.axis=2, cex.main=2, cex.sub=2, main) + geom_bar() + coord_flip() + labs(y = "Count", x = title, fill = "Label Converted", title = paste(title ,'Variable Impact')) + theme(axis.text.x  = element_text(size = 13), axis.text.y  = element_text(size = 15), axis.title.x  = element_text(size = 15), axis.title.y  = element_text(size = 13)))
#}
@

<<label = job_function_impact, fig=TRUE, echo=FALSE, eval=TRUE, results=tex, width=20, height=10, include=FALSE>>=
print(ggplot(df_default[df_default$JobFunction!='', ], aes(x=JobFunction, group=Label_Converted, fill = Label_Converted), cex.lab=2, cex.axis=2, cex.main=2, cex.sub=2, main) + geom_bar() + coord_flip() + labs(y = "Count", x = "Job Function", fill = "Label Converted", title = sprintf('%s (Job Function Variable Impact)', df_name)) + theme(axis.text.x  = element_text(size = 13), axis.text.y  = element_text(size = 15), axis.title.x  = element_text(size = 15), axis.title.y  = element_text(size = 13)))
@

<<label = DNB_employeesTotal_impact, fig=TRUE, echo=FALSE, eval=TRUE, results=tex, width=20, height=10, include=FALSE>>=
print(ggplot(df_default[df_default$DNB_employeesTotal!='', ], aes(x=DNB_employeesTotal, group=Label_Converted, fill = Label_Converted), cex.lab=2, cex.axis=2, cex.main=2, cex.sub=2, main) + geom_bar() + coord_flip() + labs(y = "Count", x = "DNB_employeesTotal", fill = "Label Converted", title = sprintf('%s (DNB_employeesTotal Variable Impact)', df_name)) + theme(axis.text.x  = element_text(size = 13), axis.text.y  = element_text(size = 15), axis.title.x  = element_text(size = 15), axis.title.y  = element_text(size = 13)))
@



%BEGIN-----------------------------------------------------------------------------------------------------------------------------------------------------
\indent This is a draft report for Data Profiling using the data gathered on \Sexpr{df_name} with \Sexpr{nrow(df_default)} records. The figures and tables follows as such: Data coverage across columns (top 40 and bottom 40 signals by coverage percentage), Data coverage across records, Variable Impact on conversion, and percentage of conversion by Job Seniority, Job Function, DNB Employee Total classifications respectively, and a decomposition effect of each variable group. The variable impact figures can be expanded to more variables as long as they have level classifications.
\newline
\newline
The following table shows the percentages for the three classification model.
\newline
\begin{center}
<<win_loss, comment=NA, results=tex, echo=FALSE>>=
library(xtable)
win_loss_table <- table(df_default$label_converted.)/(sum(table(df_default$label_converted.)))
win_loss_frame <- data.frame(win_loss_table)
colnames(win_loss_frame) <- c('classification group', 'proportion of total dataset')
win_table <- (xtable(win_loss_frame,caption = '"2": Wins, "1": Converted, "0": Unconverted', digits = 2))
align(win_table) <- "l|l|r|"
print(win_table, include.rownames=FALSE)
@
\end{center}
\clearpage

% Revenue Distribution Section ----------------------------------------------------------------------------------------------------------------------------
% Need to rename the prefix of the pdf image files to match the sweave file name of the report (i.e. ________-rev_distr.pdf)
\section*{Revenue Distribution}
revenue distribution tables (with and without the zero values included)
  \begin{figure}[h!]
    \begin{center}
      \includegraphics[ height=8cm, width=14cm]{TEMPLATE_3CL-rev_distr.pdf}
      \caption{Marketo Revenue Distribution}

      \includegraphics[ height=8cm, width=14cm]{TEMPLATE_3CL-rev_distr_no_zero.pdf}
      \caption{Marketo Revenue Distribution (Zeros removed)}
    \end{center}
  \end{figure}
\clearpage

% Data Coverage Section -----------------------------------------------------------------------------------------------------------------------------------
\section*{Data Coverage}
\href{https://docs.google.com/spreadsheets/d/1RC5z4wlpOJfv8dcm-xIAjjMatzzZaN_3CiL89wdcxS0/edit?usp=sharing}{Link for Total Coverage List}
<<top_25, comment=NA, results=tex, echo=FALSE>>=
library(xtable)
trim <- function( x ) {
  gsub("(^[[:space:]]+|[[:space:]]+$)", "", x)
}

dataQuality <- function(df, dfname){
  #Data coverage - column wise
  #print(as.character(bquote(dfname)))
  m<-sapply(df, function(x) sum(trim(x) =='' | is.na(x)))
  t<- data.frame(1-(m[order(m)] / nrow(df)))
  t$signalName <- row.names(t)
  t$nrows <- nrow(df)
  t <- data.frame(cbind(t[,2],t[,1],t[,3]), stringsAsFactors=FALSE)
  names(t) <- c('Variable Name', 'Coverage Pct', sprintf('%s Count', dfname))
  t
}

no_one <- function(df){
  ctr_1 = 0
  for (row in 1:nrow(df)){
    if (df[row, 2] == 1){
    ctr_1 <- 1 + ctr_1
    }
  }
  ctr_1
}

no_zero <- function(df){
  ctr_0 = 0
  for (row in 1:nrow(df)){
    if (df[row, 2] == 0){
    ctr_0 <- 1 + ctr_0
    }
  }
  ctr_0
}

x_read <- read.csv('/Users/Fliptop/EXTRACT_ALL/Report_Test/Coverage_Report.csv')
x_name <- sprintf('%s_coveragePct', df_name)

x_global_included <- data.frame(x_read['X'], x_read[x_name], x_read['globalPercentage'], x_read[x_name]/x_read$globalPercentage)
names(x_global_included) <- c('variable names', 'coverage proportion', 'global proportion', 'index')

x_global_included_trim <- (x_global_included[no_one(x_global_included):no_zero(x_global_included), ])
x_global_included_trim_sort <- x_global_included_trim[order(-x_global_included_trim[ ,2]), ]
x_global_included_top40 <- x_global_included_trim_sort[1:40, ]

top40_table <- (xtable(x_global_included_top40, caption = 'Top 40 Variables by Coverage', digits = 2))
align(top40_table) <- "l|l|r|r|r|"
print(top40_table, include.rownames=FALSE, table.placement = 'h!')
@
\clearpage
<<bot_25, comment=NA, results=tex, echo=FALSE>>=
x_global_included_bot40 <- x_global_included_trim_sort[(nrow(x_global_included_trim_sort)-39):nrow(x_global_included_trim_sort), ]

bot40_table <- (xtable(x_global_included_bot40, caption = 'Bottom 40 Variables by Coverage', digits = 2))
align(bot40_table) <- "l|l|r|r|r|"
print(bot40_table, include.rownames=FALSE, table.placement = 'h!')
@
\clearpage

  \begin{figure}[h!]
    \begin{center}
      \includegraphics[ height=9cm, width=14cm]{TEMPLATE_3CL-data_coverage.pdf}
      \caption{Data Coverage across all records in \Sexpr{df_name}}

      \includegraphics[ height=9cm, width=14cm]{TEMPLATE_3CL-mko_data_coverage.pdf}
      \caption{Data Coverage of Marketing Activity variables across all records in \Sexpr{df_name}}
    \end{center}
  \end{figure}
\clearpage

  \begin{figure}[h!]
    \begin{center}
      \includegraphics[ height=9cm, width=14cm]{TEMPLATE_3CL-platform_data_coverage.pdf}
      \caption{Data Coverage of Marketing and Personal Info variables across all records in \Sexpr{df_name}}

      \includegraphics[ height=9cm, width=14cm]{TEMPLATE_3CL-inboundscore_data_coverage.pdf}
      \caption{Data Coverage of Business Social variables across all records in \Sexpr{df_name}}
    \end{center}
  \end{figure}
\clearpage

  \begin{figure}[h!]
    \begin{center}
      \includegraphics[ height=9cm, width=14cm]{TEMPLATE_3CL-bw_data_coverage.pdf}
      \caption{Data Coverage of Business Technology variables across all records in \Sexpr{df_name}}

      \includegraphics[ height=9cm, width=14cm]{TEMPLATE_3CL-dnb_data_coverage.pdf}
      \caption{Data Coverage of Business Info variables across all records in \Sexpr{df_name}}
    \end{center}
  \end{figure}
\clearpage

  \begin{figure}[h!]
    \begin{center}
      \includegraphics[ height=9cm, width=14cm]{TEMPLATE_3CL-indeed_data_coverage.pdf}
      \caption{Data Coverage of Business Hiring variables across all records in \Sexpr{df_name}}

      \includegraphics[ height=9cm, width=14cm]{TEMPLATE_3CL-pg_data_coverage.pdf}
      \caption{Data Coverage of Personal Social variables across all records in \Sexpr{df_name}}
    \end{center}
  \end{figure}
\clearpage

% Variable Impact Section ---------------------------------------------------------------------------------------------------------------------------------
% Subsection ----------------------------------------------------------------------------------------------------------------------------------------------
\section*{Variable Impact}
\subsection*{Job Seniority}
  \begin{figure}[h!]
    \begin{center}
      \includegraphics[ height=10cm, width=15cm]{TEMPLATE_3CL-job_seniority_impact.pdf}
      \caption{Impact of Job Seniority on conversion}
    \end{center}
  \end{figure}
<<job_seniority_percent, comment=NA, results=tex, echo=FALSE>>=
library(xtable)
df_default$Label_Converted <- sapply(df_default$label_converted., toString)

row_count <- function(df){
  row_sum <- rep(-1, nrow(df))
  for (row in 1:nrow(df)){
    row_sum[row] <- (df[row,1] + df[row,2] + df[row,3])
  }
  row_sum
}

#comparison_table <- table(df_default$JobSeniority, df_default$Label_Converted)
#col_name <- names(table(df_default$JobSeniority))
#percentage_table <- data.frame(JobSeniority = col_name, percentages=c(1:nrow(comparison_table)), count = row_count(comparison_table))
#for (row in 1:nrow(comparison_table)){
#  percentage_table[row,2] <- ((comparison_table[row,3]+comparison_table[row,2])/(comparison_table[row,3]+comparison_table[row,2]+comparison_table[row,1]))
#}
#sorted_cols <- (percentage_table[order(-percentage_table$percentages), ])
#names(sorted_cols) <- c('Job Seniority', 'Proportion of Conversions', 'Row Count')

#job_seniority_impact_table <- (xtable(sorted_cols, digits = c(0,0,2,0), caption=" Job Seniority Impact Percentages"))
#align(job_seniority_impact_table) <- "l|l|r|r|"
#print(job_seniority_impact_table, include.rownames=FALSE, table.placement='h!')

variable_impact_table <- function(df, variable, name){
  comparison_table <- table(df[, variable], df$Label_Converted)
  col_name <- names(table(df[, variable]))
  percentage_table <- data.frame(variable = col_name, percentages=c(1:nrow(comparison_table)), count = row_count(comparison_table))
  for (row in 1:nrow(comparison_table)){
    percentage_table[row,2] <- ((comparison_table[row,3]+comparison_table[row,2])/(comparison_table[row,3]+comparison_table[row,2]+comparison_table[row,1]))
  }
  sorted_cols <- (percentage_table[order(-percentage_table$percentages), ])
  names(sorted_cols) <- c(name, 'Proportion of Conversions', 'Row Count')

  impact_table <- (xtable(sorted_cols, digits = c(0,0,2,0), caption=paste(name, ' Impact Percentages')))
  align(impact_table) <- 'l|l|r|r|'
  print(impact_table, include.rownames=FALSE, table.placement='h!')
}

variable_impact_table(df_default, 'JobSeniority', 'Job Seniority')
@
\clearpage

% Subsection ----------------------------------------------------------------------------------------------------------------------------------------------
\subsection*{Job Function}
  \begin{figure}[ht!]
    \begin{center}
      \includegraphics[ height=10cm, width=15cm]{TEMPLATE_3CL-job_function_impact.pdf}
      \caption{Impact of Job Function on conversion}
    \end{center}
  \end{figure}
<<job_function_percent, comment=NA, results=tex, echo=FALSE>>=
variable_impact_table(df_default, 'JobFunction', 'Job Function')
@
\clearpage

% Subsection ------------------------------------------------------------------------------------------------------------------------------------------------
\subsection*{DNB Employee Total}
  \begin{figure}[ht!]
    \begin{center}
      \includegraphics[ height=10cm, width=15cm]{TEMPLATE_3CL-DNB_employeesTotal_impact.pdf}
      \caption{Impact of DNB\_employeesTotal on conversion}
    \end{center}
  \end{figure}
<<DNB_employeesTotal_percent, comment=NA, results=tex, echo=FALSE>>=
variable_impact_table(df_default, 'DNB_employeesTotal', 'DNB Total Employees')
@
\clearpage


% Decomposing Effect of Model Section---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
% Generated in python
\section*{Decomposing Effect of Model}
  \begin{figure}[h!]
    \begin{center}
      \includegraphics[ height=15cm, width=15cm]{/Users/Fliptop/Downloads/marketo_updated_chart.png}
    \end{center}
  \end{figure}

\end{document}
